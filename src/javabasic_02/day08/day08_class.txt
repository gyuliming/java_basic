1. 문자열(String)타입
      문자열(하나의 이상의 문자들의 집합) " "  표기한다.
      자바 : 문자열 데이터를 저장하기 위해 String 타입을 사용한다.
      어떻게 다루느냐에 따라 어플리케이션의 성능이 차이가 난다.


- 메모리
stack 영역이 아닌 객체와 같이 힙에서 문자열 데이터가 생성되고 다뤄짐


- String 클래스의 기본적인 성질
기본적으로 자바에서는 String 객체의 값은 변경할 수 없다(Immutable)


hashCode() 메소드는 객체의 메모리 번지를 이용해서 해시코드를 만들어 리턴하는 메소드


자바의 String은 왜 Immutable로 설계되었을까?
- 보안(공격자의 값 변경 방지), 멀티 스레딩 환경의 안전성 향상(동기화 문제 X)
- 메모리 효율적 관리(JVM에서는 따로 힙 영역 안에 String Constant pool로 관리)
    문자열을 상수화하여 다른 변수나 다른 객체들과 공유하게 제공
- 동일한 값의 복사본 생성 최소화
- 문자열은 불변이라서 해시코드는 생성 시점에 캐시됨 다시 계산할 필요 X(처리 속도 빠름)


- 자바에서 String 변수 선언 방법 2가지
1. 리터럴
2. new 연산자


자바에서 문자열을 다루는 자료형 String, StringBuffer, StringBuilder 3가지 자료형을 지원한다.
위 3가지 자료형은 문자열을 다루지만, 사용목적에 따라 용도가 많이 달라진다.

- Stringbuffer, StringBuilder (기본 String 클래스의 문자열을 연산할때 불편한점을 보완하여 제공됨)

객체의 공간이 부족하면 버퍼의 크기를 유연하게 늘려서 가변적(mutable)이라고 한다.

내부 Buffer(데이터를 임시로 저장하는 메모리)에 문자열을 저장해두고 그 안에서 추가, 수정, 삭제
작업을 할 수 있게 설계된 클래스이다.

문자열의 수정이 빈번한 경우, 가변 타입 사용

네트워크상에서 데이터를 송수신하는 경우는 불변타입을 사용하는 것이 적합하다. ex) json

3. 배열 복사
    배열은 고정된 크기의 같은 데이터 타입의 데이터만 저장하는 자료구조
    배열은 만들고 나서 데이터를 저장하다보니 배열공간이 부족해 질 수 있는 상황이 온다.

    배열 확장

    따로 공간이 큰 배열을 새로 만들고, 기존의 배열의 내용을 새로 만든 배열에 옮겨 담는(복사) 식으로 사용(간접 확장 방식)

    배열의 길이를 넉넉하게 잡는 것이 좋았었음

    자바에서는 Arrays 클래스에 Arrays.copyOf(), System.arraycopy(), for 문으로 반복문을 돌리면서 복사