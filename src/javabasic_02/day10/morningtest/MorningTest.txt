1. 4 / 참조 타입은 null 값으로 초기화 가능
2. 3 / 직접 X, GCC가 알아서 처리해줌
3. 2 / 문자열 비교는 equals() 사용
4. 2 / 2번은 옳지않은 문법
5. 3 / boolean의 초기값은 false
6. 3, 5
7.
int max = array[i];
for (int i = 0; i < arr.length; i++) {
	max = Math.max(max, array[i]);
}
System.out.println(array[i]);

8.
int sum = 0;
int count = 0;
for (int i = 0; i < array.length; i++) {
    for (int j = 0; j < array[i].length; j++) {
        sum += array[i][j];
        count++;
    }
}
double avg = (double) sum / count;
System.out.printf("합계 : %d\n 평균 : %.1f", sum, avg);
-------------------------------------------------------------------
1. 3 / 하나의 클래스로 여러 개의 객체를 생성할 수 있다.
2. 4 / 클래스의 구성 멤버 : 필드, 생성자, 메소드 | 로컬변수는 메소드의 구성요소
3. 4 / 클래스는 반드시 필드와 메소드를 가질 필요가 없다.
4. 3 / 필드는 클래스 필드 내에 어느 위치에서도 선언가능
5. 1 / 객체를 생성하기 위해서는 생성자 호출이 필요하다.
6. 4 / 오버로딩 : 메소드 이름 중복 선언 가능
7. 2 /
8. 2 / 멤버 앞에 static이 붙으면 정적 멤버, com.age -> 인스턴스 멤버 | 인스턴스 필드는 생성자 및 정적 블록에서 초기화 X
9. 2 / final 필드와 상수는 생성자에서 초기화 X -> 생성자는 객체의 영역
10. 4 /
11. 3
12. 필드 / 생성자 / 메소드
13.  Member.java
public class Member {
    String name;
    String id;
    String password;
    int age;
}
14. Member.java
    public class Member {
        String name;
        String id;
        String password;
        int age;

        Member (String name, String id) {
            this.name = name;
            this.id = id;
        }
    }
15.
public class MemberService {
    static boolean login(String id, String password) {
        return id.equals("hong") && password.equals("12345");
    }

    static void logout(String id) {
        System.out.println(id + "님이 로그아웃 되었습니다.");
    }
}
16.
public class Printer {

    void println(int value) {
        System.out.println(value);
    }

    void println(boolean value) {
        System.out.println(value);
    }

    void println(double value) {
        System.out.println(value);
    }

    void println(String value) {
        System.out.println(value);
    }
}
17.
public class Printer {

    static void println(int value) {
        System.out.println(value);
    }

    static void println(boolean value) {
        System.out.println(value);
    }

    static void println(double value) {
        System.out.println(value);
    }

    static void println(String value) {
        System.out.println(value);
    }
}
18.
class ShopService {
    private static final ShopService shopService = new ShopService();

    public static ShopService getInstance() {
        return shopService;
    }
}
19.
public class Account {
    private int balance;
    private static int MIN_BALANCE = 0;
    private static int MAX_BALANCE = 1000000;

    public int getBalance() {
        return balance;
    }

    public void setBalance(int balance) {
        if (MIN_BALANCE <= balance && balance <= MAX_BALANCE) {
            this.balance = balance;
        } else this.balance = getBalance();
    }
}
20.